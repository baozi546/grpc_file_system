// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: define.proto
// Protobuf C++ Version: 5.29.3

#ifndef define_2eproto_2epb_2eh
#define define_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_define_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_define_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_define_2eproto;
namespace file_system {
class CopyRequest;
struct CopyRequestDefaultTypeInternal;
extern CopyRequestDefaultTypeInternal _CopyRequest_default_instance_;
class CreateRequest;
struct CreateRequestDefaultTypeInternal;
extern CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
class FileChunk;
struct FileChunkDefaultTypeInternal;
extern FileChunkDefaultTypeInternal _FileChunk_default_instance_;
class FileMetadata;
struct FileMetadataDefaultTypeInternal;
extern FileMetadataDefaultTypeInternal _FileMetadata_default_instance_;
class FileMetadata_ExtensionsEntry_DoNotUse;
struct FileMetadata_ExtensionsEntry_DoNotUseDefaultTypeInternal;
extern FileMetadata_ExtensionsEntry_DoNotUseDefaultTypeInternal _FileMetadata_ExtensionsEntry_DoNotUse_default_instance_;
class FileOperationRequest;
struct FileOperationRequestDefaultTypeInternal;
extern FileOperationRequestDefaultTypeInternal _FileOperationRequest_default_instance_;
class FileRequest;
struct FileRequestDefaultTypeInternal;
extern FileRequestDefaultTypeInternal _FileRequest_default_instance_;
class FindFileRequest;
struct FindFileRequestDefaultTypeInternal;
extern FindFileRequestDefaultTypeInternal _FindFileRequest_default_instance_;
class LoginRequest;
struct LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
struct LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class MergeChunkRequest;
struct MergeChunkRequestDefaultTypeInternal;
extern MergeChunkRequestDefaultTypeInternal _MergeChunkRequest_default_instance_;
class OperationResponse;
struct OperationResponseDefaultTypeInternal;
extern OperationResponseDefaultTypeInternal _OperationResponse_default_instance_;
class PermissionRequest;
struct PermissionRequestDefaultTypeInternal;
extern PermissionRequestDefaultTypeInternal _PermissionRequest_default_instance_;
class PermissionResponse;
struct PermissionResponseDefaultTypeInternal;
extern PermissionResponseDefaultTypeInternal _PermissionResponse_default_instance_;
class ReNameRequest;
struct ReNameRequestDefaultTypeInternal;
extern ReNameRequestDefaultTypeInternal _ReNameRequest_default_instance_;
class RemoveRequest;
struct RemoveRequestDefaultTypeInternal;
extern RemoveRequestDefaultTypeInternal _RemoveRequest_default_instance_;
class UploadFileResponse;
struct UploadFileResponseDefaultTypeInternal;
extern UploadFileResponseDefaultTypeInternal _UploadFileResponse_default_instance_;
class UploadStatus;
struct UploadStatusDefaultTypeInternal;
extern UploadStatusDefaultTypeInternal _UploadStatus_default_instance_;
class UploadStatus_ChunkStatusEntry_DoNotUse;
struct UploadStatus_ChunkStatusEntry_DoNotUseDefaultTypeInternal;
extern UploadStatus_ChunkStatusEntry_DoNotUseDefaultTypeInternal _UploadStatus_ChunkStatusEntry_DoNotUse_default_instance_;
}  // namespace file_system
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace file_system {
enum FileOperationType : int {
  CREATE = 0,
  REMOVE = 1,
  RENAME = 2,
  COPY = 3,
  FileOperationType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FileOperationType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FileOperationType_IsValid(int value);
extern const uint32_t FileOperationType_internal_data_[];
constexpr FileOperationType FileOperationType_MIN = static_cast<FileOperationType>(0);
constexpr FileOperationType FileOperationType_MAX = static_cast<FileOperationType>(3);
constexpr int FileOperationType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
FileOperationType_descriptor();
template <typename T>
const std::string& FileOperationType_Name(T value) {
  static_assert(std::is_same<T, FileOperationType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FileOperationType_Name().");
  return FileOperationType_Name(static_cast<FileOperationType>(value));
}
template <>
inline const std::string& FileOperationType_Name(FileOperationType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<FileOperationType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool FileOperationType_Parse(absl::string_view name, FileOperationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FileOperationType>(
      FileOperationType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UploadStatus_ChunkStatusEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          ::int32_t, bool,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
          ::google::protobuf::internal::WireFormatLite::TYPE_BOOL> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      ::int32_t, bool,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>;
  UploadStatus_ChunkStatusEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UploadStatus_ChunkStatusEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit UploadStatus_ChunkStatusEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const UploadStatus_ChunkStatusEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const UploadStatus_ChunkStatusEntry_DoNotUse*>(
        &_UploadStatus_ChunkStatusEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_define_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class RemoveRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:file_system.RemoveRequest) */ {
 public:
  inline RemoveRequest() : RemoveRequest(nullptr) {}
  ~RemoveRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RemoveRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RemoveRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RemoveRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RemoveRequest(const RemoveRequest& from) : RemoveRequest(nullptr, from) {}
  inline RemoveRequest(RemoveRequest&& from) noexcept
      : RemoveRequest(nullptr, std::move(from)) {}
  inline RemoveRequest& operator=(const RemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveRequest& operator=(RemoveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveRequest*>(
        &_RemoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(RemoveRequest& a, RemoveRequest& b) { a.Swap(&b); }
  inline void Swap(RemoveRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RemoveRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RemoveRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RemoveRequest& from) { RemoveRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RemoveRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "file_system.RemoveRequest"; }

 protected:
  explicit RemoveRequest(::google::protobuf::Arena* arena);
  RemoveRequest(::google::protobuf::Arena* arena, const RemoveRequest& from);
  RemoveRequest(::google::protobuf::Arena* arena, RemoveRequest&& from) noexcept
      : RemoveRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRootPathFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string root_path = 1;
  void clear_root_path() ;
  const std::string& root_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_root_path(Arg_&& arg, Args_... args);
  std::string* mutable_root_path();
  PROTOBUF_NODISCARD std::string* release_root_path();
  void set_allocated_root_path(std::string* value);

  private:
  const std::string& _internal_root_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_root_path(
      const std::string& value);
  std::string* _internal_mutable_root_path();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:file_system.RemoveRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RemoveRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr root_path_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_define_2eproto;
};
// -------------------------------------------------------------------

class ReNameRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:file_system.ReNameRequest) */ {
 public:
  inline ReNameRequest() : ReNameRequest(nullptr) {}
  ~ReNameRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReNameRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReNameRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReNameRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReNameRequest(const ReNameRequest& from) : ReNameRequest(nullptr, from) {}
  inline ReNameRequest(ReNameRequest&& from) noexcept
      : ReNameRequest(nullptr, std::move(from)) {}
  inline ReNameRequest& operator=(const ReNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReNameRequest& operator=(ReNameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReNameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReNameRequest* internal_default_instance() {
    return reinterpret_cast<const ReNameRequest*>(
        &_ReNameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(ReNameRequest& a, ReNameRequest& b) { a.Swap(&b); }
  inline void Swap(ReNameRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReNameRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReNameRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReNameRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReNameRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReNameRequest& from) { ReNameRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReNameRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "file_system.ReNameRequest"; }

 protected:
  explicit ReNameRequest(::google::protobuf::Arena* arena);
  ReNameRequest(::google::protobuf::Arena* arena, const ReNameRequest& from);
  ReNameRequest(::google::protobuf::Arena* arena, ReNameRequest&& from) noexcept
      : ReNameRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRootPathFieldNumber = 1,
    kOldNameFieldNumber = 2,
    kNewNameFieldNumber = 3,
  };
  // string root_path = 1;
  void clear_root_path() ;
  const std::string& root_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_root_path(Arg_&& arg, Args_... args);
  std::string* mutable_root_path();
  PROTOBUF_NODISCARD std::string* release_root_path();
  void set_allocated_root_path(std::string* value);

  private:
  const std::string& _internal_root_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_root_path(
      const std::string& value);
  std::string* _internal_mutable_root_path();

  public:
  // string old_name = 2;
  void clear_old_name() ;
  const std::string& old_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_old_name(Arg_&& arg, Args_... args);
  std::string* mutable_old_name();
  PROTOBUF_NODISCARD std::string* release_old_name();
  void set_allocated_old_name(std::string* value);

  private:
  const std::string& _internal_old_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_name(
      const std::string& value);
  std::string* _internal_mutable_old_name();

  public:
  // string new_name = 3;
  void clear_new_name() ;
  const std::string& new_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_name(Arg_&& arg, Args_... args);
  std::string* mutable_new_name();
  PROTOBUF_NODISCARD std::string* release_new_name();
  void set_allocated_new_name(std::string* value);

  private:
  const std::string& _internal_new_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_name(
      const std::string& value);
  std::string* _internal_mutable_new_name();

  public:
  // @@protoc_insertion_point(class_scope:file_system.ReNameRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReNameRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr root_path_;
    ::google::protobuf::internal::ArenaStringPtr old_name_;
    ::google::protobuf::internal::ArenaStringPtr new_name_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_define_2eproto;
};
// -------------------------------------------------------------------

class PermissionResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:file_system.PermissionResponse) */ {
 public:
  inline PermissionResponse() : PermissionResponse(nullptr) {}
  ~PermissionResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PermissionResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PermissionResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PermissionResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PermissionResponse(const PermissionResponse& from) : PermissionResponse(nullptr, from) {}
  inline PermissionResponse(PermissionResponse&& from) noexcept
      : PermissionResponse(nullptr, std::move(from)) {}
  inline PermissionResponse& operator=(const PermissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermissionResponse& operator=(PermissionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PermissionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PermissionResponse* internal_default_instance() {
    return reinterpret_cast<const PermissionResponse*>(
        &_PermissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(PermissionResponse& a, PermissionResponse& b) { a.Swap(&b); }
  inline void Swap(PermissionResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermissionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermissionResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PermissionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PermissionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PermissionResponse& from) { PermissionResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PermissionResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "file_system.PermissionResponse"; }

 protected:
  explicit PermissionResponse(::google::protobuf::Arena* arena);
  PermissionResponse(::google::protobuf::Arena* arena, const PermissionResponse& from);
  PermissionResponse(::google::protobuf::Arena* arena, PermissionResponse&& from) noexcept
      : PermissionResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReasonFieldNumber = 2,
    kAllowedFieldNumber = 1,
  };
  // string reason = 2;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // bool allowed = 1;
  void clear_allowed() ;
  bool allowed() const;
  void set_allowed(bool value);

  private:
  bool _internal_allowed() const;
  void _internal_set_allowed(bool value);

  public:
  // @@protoc_insertion_point(class_scope:file_system.PermissionResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      45, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PermissionResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr reason_;
    bool allowed_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_define_2eproto;
};
// -------------------------------------------------------------------

class PermissionRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:file_system.PermissionRequest) */ {
 public:
  inline PermissionRequest() : PermissionRequest(nullptr) {}
  ~PermissionRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PermissionRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PermissionRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PermissionRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PermissionRequest(const PermissionRequest& from) : PermissionRequest(nullptr, from) {}
  inline PermissionRequest(PermissionRequest&& from) noexcept
      : PermissionRequest(nullptr, std::move(from)) {}
  inline PermissionRequest& operator=(const PermissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermissionRequest& operator=(PermissionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PermissionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PermissionRequest* internal_default_instance() {
    return reinterpret_cast<const PermissionRequest*>(
        &_PermissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(PermissionRequest& a, PermissionRequest& b) { a.Swap(&b); }
  inline void Swap(PermissionRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermissionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermissionRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PermissionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PermissionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PermissionRequest& from) { PermissionRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PermissionRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "file_system.PermissionRequest"; }

 protected:
  explicit PermissionRequest(::google::protobuf::Arena* arena);
  PermissionRequest(::google::protobuf::Arena* arena, const PermissionRequest& from);
  PermissionRequest(::google::protobuf::Arena* arena, PermissionRequest&& from) noexcept
      : PermissionRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResourcePathFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // string resource_path = 1;
  void clear_resource_path() ;
  const std::string& resource_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_resource_path(Arg_&& arg, Args_... args);
  std::string* mutable_resource_path();
  PROTOBUF_NODISCARD std::string* release_resource_path();
  void set_allocated_resource_path(std::string* value);

  private:
  const std::string& _internal_resource_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource_path(
      const std::string& value);
  std::string* _internal_mutable_resource_path();

  public:
  // string action = 2;
  void clear_action() ;
  const std::string& action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action(Arg_&& arg, Args_... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* value);

  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(
      const std::string& value);
  std::string* _internal_mutable_action();

  public:
  // @@protoc_insertion_point(class_scope:file_system.PermissionRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PermissionRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr resource_path_;
    ::google::protobuf::internal::ArenaStringPtr action_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_define_2eproto;
};
// -------------------------------------------------------------------

class OperationResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:file_system.OperationResponse) */ {
 public:
  inline OperationResponse() : OperationResponse(nullptr) {}
  ~OperationResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(OperationResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(OperationResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OperationResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline OperationResponse(const OperationResponse& from) : OperationResponse(nullptr, from) {}
  inline OperationResponse(OperationResponse&& from) noexcept
      : OperationResponse(nullptr, std::move(from)) {}
  inline OperationResponse& operator=(const OperationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationResponse& operator=(OperationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationResponse* internal_default_instance() {
    return reinterpret_cast<const OperationResponse*>(
        &_OperationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(OperationResponse& a, OperationResponse& b) { a.Swap(&b); }
  inline void Swap(OperationResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<OperationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OperationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OperationResponse& from) { OperationResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(OperationResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "file_system.OperationResponse"; }

 protected:
  explicit OperationResponse(::google::protobuf::Arena* arena);
  OperationResponse(::google::protobuf::Arena* arena, const OperationResponse& from);
  OperationResponse(::google::protobuf::Arena* arena, OperationResponse&& from) noexcept
      : OperationResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExtensionsFieldNumber = 2,
    kErrorDetailFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // optional string extensions = 2;
  bool has_extensions() const;
  void clear_extensions() ;
  const std::string& extensions() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_extensions(Arg_&& arg, Args_... args);
  std::string* mutable_extensions();
  PROTOBUF_NODISCARD std::string* release_extensions();
  void set_allocated_extensions(std::string* value);

  private:
  const std::string& _internal_extensions() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extensions(
      const std::string& value);
  std::string* _internal_mutable_extensions();

  public:
  // optional string error_detail = 3;
  bool has_error_detail() const;
  void clear_error_detail() ;
  const std::string& error_detail() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_detail(Arg_&& arg, Args_... args);
  std::string* mutable_error_detail();
  PROTOBUF_NODISCARD std::string* release_error_detail();
  void set_allocated_error_detail(std::string* value);

  private:
  const std::string& _internal_error_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_detail(
      const std::string& value);
  std::string* _internal_mutable_error_detail();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:file_system.OperationResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      60, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OperationResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr extensions_;
    ::google::protobuf::internal::ArenaStringPtr error_detail_;
    bool success_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_define_2eproto;
};
// -------------------------------------------------------------------

class MergeChunkRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:file_system.MergeChunkRequest) */ {
 public:
  inline MergeChunkRequest() : MergeChunkRequest(nullptr) {}
  ~MergeChunkRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MergeChunkRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MergeChunkRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MergeChunkRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline MergeChunkRequest(const MergeChunkRequest& from) : MergeChunkRequest(nullptr, from) {}
  inline MergeChunkRequest(MergeChunkRequest&& from) noexcept
      : MergeChunkRequest(nullptr, std::move(from)) {}
  inline MergeChunkRequest& operator=(const MergeChunkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeChunkRequest& operator=(MergeChunkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MergeChunkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MergeChunkRequest* internal_default_instance() {
    return reinterpret_cast<const MergeChunkRequest*>(
        &_MergeChunkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(MergeChunkRequest& a, MergeChunkRequest& b) { a.Swap(&b); }
  inline void Swap(MergeChunkRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MergeChunkRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MergeChunkRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MergeChunkRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MergeChunkRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MergeChunkRequest& from) { MergeChunkRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MergeChunkRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "file_system.MergeChunkRequest"; }

 protected:
  explicit MergeChunkRequest(::google::protobuf::Arena* arena);
  MergeChunkRequest(::google::protobuf::Arena* arena, const MergeChunkRequest& from);
  MergeChunkRequest(::google::protobuf::Arena* arena, MergeChunkRequest&& from) noexcept
      : MergeChunkRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFileIdFieldNumber = 1,
  };
  // string file_id = 1;
  void clear_file_id() ;
  const std::string& file_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_id(Arg_&& arg, Args_... args);
  std::string* mutable_file_id();
  PROTOBUF_NODISCARD std::string* release_file_id();
  void set_allocated_file_id(std::string* value);

  private:
  const std::string& _internal_file_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_id(
      const std::string& value);
  std::string* _internal_mutable_file_id();

  public:
  // @@protoc_insertion_point(class_scope:file_system.MergeChunkRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      45, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MergeChunkRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr file_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_define_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:file_system.LoginResponse) */ {
 public:
  inline LoginResponse() : LoginResponse(nullptr) {}
  ~LoginResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LoginResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LoginResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LoginResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline LoginResponse(const LoginResponse& from) : LoginResponse(nullptr, from) {}
  inline LoginResponse(LoginResponse&& from) noexcept
      : LoginResponse(nullptr, std::move(from)) {}
  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
        &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(LoginResponse& a, LoginResponse& b) { a.Swap(&b); }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LoginResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LoginResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LoginResponse& from) { LoginResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LoginResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "file_system.LoginResponse"; }

 protected:
  explicit LoginResponse(::google::protobuf::Arena* arena);
  LoginResponse(::google::protobuf::Arena* arena, const LoginResponse& from);
  LoginResponse(::google::protobuf::Arena* arena, LoginResponse&& from) noexcept
      : LoginResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTokenFieldNumber = 1,
    kExpiresInFieldNumber = 2,
  };
  // string token = 1;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // int64 expires_in = 2;
  void clear_expires_in() ;
  ::int64_t expires_in() const;
  void set_expires_in(::int64_t value);

  private:
  ::int64_t _internal_expires_in() const;
  void _internal_set_expires_in(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:file_system.LoginResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      39, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LoginResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr token_;
    ::int64_t expires_in_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_define_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:file_system.LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {}
  ~LoginRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LoginRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LoginRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LoginRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline LoginRequest(const LoginRequest& from) : LoginRequest(nullptr, from) {}
  inline LoginRequest(LoginRequest&& from) noexcept
      : LoginRequest(nullptr, std::move(from)) {}
  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
        &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(LoginRequest& a, LoginRequest& b) { a.Swap(&b); }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LoginRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LoginRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LoginRequest& from) { LoginRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LoginRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "file_system.LoginRequest"; }

 protected:
  explicit LoginRequest(::google::protobuf::Arena* arena);
  LoginRequest(::google::protobuf::Arena* arena, const LoginRequest& from);
  LoginRequest(::google::protobuf::Arena* arena, LoginRequest&& from) noexcept
      : LoginRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:file_system.LoginRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LoginRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_define_2eproto;
};
// -------------------------------------------------------------------

class FindFileRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:file_system.FindFileRequest) */ {
 public:
  inline FindFileRequest() : FindFileRequest(nullptr) {}
  ~FindFileRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FindFileRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FindFileRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FindFileRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline FindFileRequest(const FindFileRequest& from) : FindFileRequest(nullptr, from) {}
  inline FindFileRequest(FindFileRequest&& from) noexcept
      : FindFileRequest(nullptr, std::move(from)) {}
  inline FindFileRequest& operator=(const FindFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindFileRequest& operator=(FindFileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindFileRequest* internal_default_instance() {
    return reinterpret_cast<const FindFileRequest*>(
        &_FindFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(FindFileRequest& a, FindFileRequest& b) { a.Swap(&b); }
  inline void Swap(FindFileRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindFileRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindFileRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FindFileRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FindFileRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FindFileRequest& from) { FindFileRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FindFileRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "file_system.FindFileRequest"; }

 protected:
  explicit FindFileRequest(::google::protobuf::Arena* arena);
  FindFileRequest(::google::protobuf::Arena* arena, const FindFileRequest& from);
  FindFileRequest(::google::protobuf::Arena* arena, FindFileRequest&& from) noexcept
      : FindFileRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFileNameFieldNumber = 1,
    kRootPathFieldNumber = 2,
  };
  // string file_name = 1;
  void clear_file_name() ;
  const std::string& file_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_name(Arg_&& arg, Args_... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* value);

  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(
      const std::string& value);
  std::string* _internal_mutable_file_name();

  public:
  // optional string root_path = 2;
  bool has_root_path() const;
  void clear_root_path() ;
  const std::string& root_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_root_path(Arg_&& arg, Args_... args);
  std::string* mutable_root_path();
  PROTOBUF_NODISCARD std::string* release_root_path();
  void set_allocated_root_path(std::string* value);

  private:
  const std::string& _internal_root_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_root_path(
      const std::string& value);
  std::string* _internal_mutable_root_path();

  public:
  // @@protoc_insertion_point(class_scope:file_system.FindFileRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      54, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FindFileRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr file_name_;
    ::google::protobuf::internal::ArenaStringPtr root_path_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_define_2eproto;
};
// -------------------------------------------------------------------

class FileRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:file_system.FileRequest) */ {
 public:
  inline FileRequest() : FileRequest(nullptr) {}
  ~FileRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FileRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FileRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline FileRequest(const FileRequest& from) : FileRequest(nullptr, from) {}
  inline FileRequest(FileRequest&& from) noexcept
      : FileRequest(nullptr, std::move(from)) {}
  inline FileRequest& operator=(const FileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileRequest& operator=(FileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileRequest* internal_default_instance() {
    return reinterpret_cast<const FileRequest*>(
        &_FileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(FileRequest& a, FileRequest& b) { a.Swap(&b); }
  inline void Swap(FileRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FileRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FileRequest& from) { FileRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FileRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "file_system.FileRequest"; }

 protected:
  explicit FileRequest(::google::protobuf::Arena* arena);
  FileRequest(::google::protobuf::Arena* arena, const FileRequest& from);
  FileRequest(::google::protobuf::Arena* arena, FileRequest&& from) noexcept
      : FileRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFileIdFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // string file_id = 1;
  void clear_file_id() ;
  const std::string& file_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_id(Arg_&& arg, Args_... args);
  std::string* mutable_file_id();
  PROTOBUF_NODISCARD std::string* release_file_id();
  void set_allocated_file_id(std::string* value);

  private:
  const std::string& _internal_file_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_id(
      const std::string& value);
  std::string* _internal_mutable_file_id();

  public:
  // optional int32 index = 2;
  bool has_index() const;
  void clear_index() ;
  ::int32_t index() const;
  void set_index(::int32_t value);

  private:
  ::int32_t _internal_index() const;
  void _internal_set_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:file_system.FileRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      39, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FileRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr file_id_;
    ::int32_t index_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_define_2eproto;
};
// -------------------------------------------------------------------

class FileMetadata_ExtensionsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  FileMetadata_ExtensionsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileMetadata_ExtensionsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit FileMetadata_ExtensionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const FileMetadata_ExtensionsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const FileMetadata_ExtensionsEntry_DoNotUse*>(
        &_FileMetadata_ExtensionsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_define_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      57, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class FileChunk final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:file_system.FileChunk) */ {
 public:
  inline FileChunk() : FileChunk(nullptr) {}
  ~FileChunk() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FileChunk* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FileChunk));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileChunk(
      ::google::protobuf::internal::ConstantInitialized);

  inline FileChunk(const FileChunk& from) : FileChunk(nullptr, from) {}
  inline FileChunk(FileChunk&& from) noexcept
      : FileChunk(nullptr, std::move(from)) {}
  inline FileChunk& operator=(const FileChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileChunk& operator=(FileChunk&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileChunk* internal_default_instance() {
    return reinterpret_cast<const FileChunk*>(
        &_FileChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(FileChunk& a, FileChunk& b) { a.Swap(&b); }
  inline void Swap(FileChunk* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileChunk* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileChunk* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FileChunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileChunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FileChunk& from) { FileChunk::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FileChunk* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "file_system.FileChunk"; }

 protected:
  explicit FileChunk(::google::protobuf::Arena* arena);
  FileChunk(::google::protobuf::Arena* arena, const FileChunk& from);
  FileChunk(::google::protobuf::Arena* arena, FileChunk&& from) noexcept
      : FileChunk(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContentFieldNumber = 1,
    kFileIdFieldNumber = 2,
    kIndexFieldNumber = 3,
  };
  // bytes content = 1;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // string file_id = 2;
  void clear_file_id() ;
  const std::string& file_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_id(Arg_&& arg, Args_... args);
  std::string* mutable_file_id();
  PROTOBUF_NODISCARD std::string* release_file_id();
  void set_allocated_file_id(std::string* value);

  private:
  const std::string& _internal_file_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_id(
      const std::string& value);
  std::string* _internal_mutable_file_id();

  public:
  // int32 index = 3;
  void clear_index() ;
  ::int32_t index() const;
  void set_index(::int32_t value);

  private:
  ::int32_t _internal_index() const;
  void _internal_set_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:file_system.FileChunk)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      37, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FileChunk& from_msg);
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::google::protobuf::internal::ArenaStringPtr file_id_;
    ::int32_t index_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_define_2eproto;
};
// -------------------------------------------------------------------

class CreateRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:file_system.CreateRequest) */ {
 public:
  inline CreateRequest() : CreateRequest(nullptr) {}
  ~CreateRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CreateRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CreateRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CreateRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CreateRequest(const CreateRequest& from) : CreateRequest(nullptr, from) {}
  inline CreateRequest(CreateRequest&& from) noexcept
      : CreateRequest(nullptr, std::move(from)) {}
  inline CreateRequest& operator=(const CreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRequest& operator=(CreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRequest*>(
        &_CreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(CreateRequest& a, CreateRequest& b) { a.Swap(&b); }
  inline void Swap(CreateRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CreateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CreateRequest& from) { CreateRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CreateRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "file_system.CreateRequest"; }

 protected:
  explicit CreateRequest(::google::protobuf::Arena* arena);
  CreateRequest(::google::protobuf::Arena* arena, const CreateRequest& from);
  CreateRequest(::google::protobuf::Arena* arena, CreateRequest&& from) noexcept
      : CreateRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRootPathFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string root_path = 1;
  void clear_root_path() ;
  const std::string& root_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_root_path(Arg_&& arg, Args_... args);
  std::string* mutable_root_path();
  PROTOBUF_NODISCARD std::string* release_root_path();
  void set_allocated_root_path(std::string* value);

  private:
  const std::string& _internal_root_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_root_path(
      const std::string& value);
  std::string* _internal_mutable_root_path();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:file_system.CreateRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CreateRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr root_path_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_define_2eproto;
};
// -------------------------------------------------------------------

class CopyRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:file_system.CopyRequest) */ {
 public:
  inline CopyRequest() : CopyRequest(nullptr) {}
  ~CopyRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CopyRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CopyRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CopyRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CopyRequest(const CopyRequest& from) : CopyRequest(nullptr, from) {}
  inline CopyRequest(CopyRequest&& from) noexcept
      : CopyRequest(nullptr, std::move(from)) {}
  inline CopyRequest& operator=(const CopyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CopyRequest& operator=(CopyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CopyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CopyRequest* internal_default_instance() {
    return reinterpret_cast<const CopyRequest*>(
        &_CopyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(CopyRequest& a, CopyRequest& b) { a.Swap(&b); }
  inline void Swap(CopyRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CopyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CopyRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CopyRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CopyRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CopyRequest& from) { CopyRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CopyRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "file_system.CopyRequest"; }

 protected:
  explicit CopyRequest(::google::protobuf::Arena* arena);
  CopyRequest(::google::protobuf::Arena* arena, const CopyRequest& from);
  CopyRequest(::google::protobuf::Arena* arena, CopyRequest&& from) noexcept
      : CopyRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOldRootPathFieldNumber = 1,
    kOldNameFieldNumber = 2,
    kNewRootPathFieldNumber = 3,
    kNewNameFieldNumber = 4,
  };
  // string old_root_path = 1;
  void clear_old_root_path() ;
  const std::string& old_root_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_old_root_path(Arg_&& arg, Args_... args);
  std::string* mutable_old_root_path();
  PROTOBUF_NODISCARD std::string* release_old_root_path();
  void set_allocated_old_root_path(std::string* value);

  private:
  const std::string& _internal_old_root_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_root_path(
      const std::string& value);
  std::string* _internal_mutable_old_root_path();

  public:
  // string old_name = 2;
  void clear_old_name() ;
  const std::string& old_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_old_name(Arg_&& arg, Args_... args);
  std::string* mutable_old_name();
  PROTOBUF_NODISCARD std::string* release_old_name();
  void set_allocated_old_name(std::string* value);

  private:
  const std::string& _internal_old_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_name(
      const std::string& value);
  std::string* _internal_mutable_old_name();

  public:
  // string new_root_path = 3;
  void clear_new_root_path() ;
  const std::string& new_root_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_root_path(Arg_&& arg, Args_... args);
  std::string* mutable_new_root_path();
  PROTOBUF_NODISCARD std::string* release_new_root_path();
  void set_allocated_new_root_path(std::string* value);

  private:
  const std::string& _internal_new_root_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_root_path(
      const std::string& value);
  std::string* _internal_mutable_new_root_path();

  public:
  // string new_name = 4;
  void clear_new_name() ;
  const std::string& new_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_name(Arg_&& arg, Args_... args);
  std::string* mutable_new_name();
  PROTOBUF_NODISCARD std::string* release_new_name();
  void set_allocated_new_name(std::string* value);

  private:
  const std::string& _internal_new_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_name(
      const std::string& value);
  std::string* _internal_mutable_new_name();

  public:
  // @@protoc_insertion_point(class_scope:file_system.CopyRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      74, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CopyRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr old_root_path_;
    ::google::protobuf::internal::ArenaStringPtr old_name_;
    ::google::protobuf::internal::ArenaStringPtr new_root_path_;
    ::google::protobuf::internal::ArenaStringPtr new_name_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_define_2eproto;
};
// -------------------------------------------------------------------

class UploadStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:file_system.UploadStatus) */ {
 public:
  inline UploadStatus() : UploadStatus(nullptr) {}
  ~UploadStatus() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UploadStatus* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UploadStatus));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UploadStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline UploadStatus(const UploadStatus& from) : UploadStatus(nullptr, from) {}
  inline UploadStatus(UploadStatus&& from) noexcept
      : UploadStatus(nullptr, std::move(from)) {}
  inline UploadStatus& operator=(const UploadStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadStatus& operator=(UploadStatus&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadStatus* internal_default_instance() {
    return reinterpret_cast<const UploadStatus*>(
        &_UploadStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(UploadStatus& a, UploadStatus& b) { a.Swap(&b); }
  inline void Swap(UploadStatus* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadStatus* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UploadStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UploadStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UploadStatus& from) { UploadStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UploadStatus* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "file_system.UploadStatus"; }

 protected:
  explicit UploadStatus(::google::protobuf::Arena* arena);
  UploadStatus(::google::protobuf::Arena* arena, const UploadStatus& from);
  UploadStatus(::google::protobuf::Arena* arena, UploadStatus&& from) noexcept
      : UploadStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChunkStatusFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // map<int32, bool> chunk_status = 2;
  int chunk_status_size() const;
  private:
  int _internal_chunk_status_size() const;

  public:
  void clear_chunk_status() ;
  const ::google::protobuf::Map<::int32_t, bool>& chunk_status() const;
  ::google::protobuf::Map<::int32_t, bool>* mutable_chunk_status();

  private:
  const ::google::protobuf::Map<::int32_t, bool>& _internal_chunk_status() const;
  ::google::protobuf::Map<::int32_t, bool>* _internal_mutable_chunk_status();

  public:
  // .file_system.OperationResponse status = 1;
  bool has_status() const;
  void clear_status() ;
  const ::file_system::OperationResponse& status() const;
  PROTOBUF_NODISCARD ::file_system::OperationResponse* release_status();
  ::file_system::OperationResponse* mutable_status();
  void set_allocated_status(::file_system::OperationResponse* value);
  void unsafe_arena_set_allocated_status(::file_system::OperationResponse* value);
  ::file_system::OperationResponse* unsafe_arena_release_status();

  private:
  const ::file_system::OperationResponse& _internal_status() const;
  ::file_system::OperationResponse* _internal_mutable_status();

  public:
  // @@protoc_insertion_point(class_scope:file_system.UploadStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UploadStatus& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<UploadStatus_ChunkStatusEntry_DoNotUse, ::int32_t, bool,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>
        chunk_status_;
    ::file_system::OperationResponse* status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_define_2eproto;
};
// -------------------------------------------------------------------

class UploadFileResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:file_system.UploadFileResponse) */ {
 public:
  inline UploadFileResponse() : UploadFileResponse(nullptr) {}
  ~UploadFileResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UploadFileResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UploadFileResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UploadFileResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline UploadFileResponse(const UploadFileResponse& from) : UploadFileResponse(nullptr, from) {}
  inline UploadFileResponse(UploadFileResponse&& from) noexcept
      : UploadFileResponse(nullptr, std::move(from)) {}
  inline UploadFileResponse& operator=(const UploadFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadFileResponse& operator=(UploadFileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadFileResponse* internal_default_instance() {
    return reinterpret_cast<const UploadFileResponse*>(
        &_UploadFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(UploadFileResponse& a, UploadFileResponse& b) { a.Swap(&b); }
  inline void Swap(UploadFileResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadFileResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadFileResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UploadFileResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UploadFileResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UploadFileResponse& from) { UploadFileResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UploadFileResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "file_system.UploadFileResponse"; }

 protected:
  explicit UploadFileResponse(::google::protobuf::Arena* arena);
  UploadFileResponse(::google::protobuf::Arena* arena, const UploadFileResponse& from);
  UploadFileResponse(::google::protobuf::Arena* arena, UploadFileResponse&& from) noexcept
      : UploadFileResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFileIdFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string file_id = 2;
  void clear_file_id() ;
  const std::string& file_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_id(Arg_&& arg, Args_... args);
  std::string* mutable_file_id();
  PROTOBUF_NODISCARD std::string* release_file_id();
  void set_allocated_file_id(std::string* value);

  private:
  const std::string& _internal_file_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_id(
      const std::string& value);
  std::string* _internal_mutable_file_id();

  public:
  // .file_system.OperationResponse status = 1;
  bool has_status() const;
  void clear_status() ;
  const ::file_system::OperationResponse& status() const;
  PROTOBUF_NODISCARD ::file_system::OperationResponse* release_status();
  ::file_system::OperationResponse* mutable_status();
  void set_allocated_status(::file_system::OperationResponse* value);
  void unsafe_arena_set_allocated_status(::file_system::OperationResponse* value);
  ::file_system::OperationResponse* unsafe_arena_release_status();

  private:
  const ::file_system::OperationResponse& _internal_status() const;
  ::file_system::OperationResponse* _internal_mutable_status();

  public:
  // @@protoc_insertion_point(class_scope:file_system.UploadFileResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      46, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UploadFileResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr file_id_;
    ::file_system::OperationResponse* status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_define_2eproto;
};
// -------------------------------------------------------------------

class FileOperationRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:file_system.FileOperationRequest) */ {
 public:
  inline FileOperationRequest() : FileOperationRequest(nullptr) {}
  ~FileOperationRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FileOperationRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FileOperationRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileOperationRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline FileOperationRequest(const FileOperationRequest& from) : FileOperationRequest(nullptr, from) {}
  inline FileOperationRequest(FileOperationRequest&& from) noexcept
      : FileOperationRequest(nullptr, std::move(from)) {}
  inline FileOperationRequest& operator=(const FileOperationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileOperationRequest& operator=(FileOperationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileOperationRequest& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kCreateQuest = 2,
    kRemoveQuest = 3,
    kRenameQuest = 4,
    kCopyQuest = 5,
    REQUEST_NOT_SET = 0,
  };
  static inline const FileOperationRequest* internal_default_instance() {
    return reinterpret_cast<const FileOperationRequest*>(
        &_FileOperationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(FileOperationRequest& a, FileOperationRequest& b) { a.Swap(&b); }
  inline void Swap(FileOperationRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileOperationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileOperationRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FileOperationRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileOperationRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FileOperationRequest& from) { FileOperationRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FileOperationRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "file_system.FileOperationRequest"; }

 protected:
  explicit FileOperationRequest(::google::protobuf::Arena* arena);
  FileOperationRequest(::google::protobuf::Arena* arena, const FileOperationRequest& from);
  FileOperationRequest(::google::protobuf::Arena* arena, FileOperationRequest&& from) noexcept
      : FileOperationRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTypeFieldNumber = 1,
    kCreateQuestFieldNumber = 2,
    kRemoveQuestFieldNumber = 3,
    kRenameQuestFieldNumber = 4,
    kCopyQuestFieldNumber = 5,
  };
  // .file_system.FileOperationType type = 1;
  void clear_type() ;
  ::file_system::FileOperationType type() const;
  void set_type(::file_system::FileOperationType value);

  private:
  ::file_system::FileOperationType _internal_type() const;
  void _internal_set_type(::file_system::FileOperationType value);

  public:
  // .file_system.CreateRequest create_quest = 2;
  bool has_create_quest() const;
  private:
  bool _internal_has_create_quest() const;

  public:
  void clear_create_quest() ;
  const ::file_system::CreateRequest& create_quest() const;
  PROTOBUF_NODISCARD ::file_system::CreateRequest* release_create_quest();
  ::file_system::CreateRequest* mutable_create_quest();
  void set_allocated_create_quest(::file_system::CreateRequest* value);
  void unsafe_arena_set_allocated_create_quest(::file_system::CreateRequest* value);
  ::file_system::CreateRequest* unsafe_arena_release_create_quest();

  private:
  const ::file_system::CreateRequest& _internal_create_quest() const;
  ::file_system::CreateRequest* _internal_mutable_create_quest();

  public:
  // .file_system.RemoveRequest remove_quest = 3;
  bool has_remove_quest() const;
  private:
  bool _internal_has_remove_quest() const;

  public:
  void clear_remove_quest() ;
  const ::file_system::RemoveRequest& remove_quest() const;
  PROTOBUF_NODISCARD ::file_system::RemoveRequest* release_remove_quest();
  ::file_system::RemoveRequest* mutable_remove_quest();
  void set_allocated_remove_quest(::file_system::RemoveRequest* value);
  void unsafe_arena_set_allocated_remove_quest(::file_system::RemoveRequest* value);
  ::file_system::RemoveRequest* unsafe_arena_release_remove_quest();

  private:
  const ::file_system::RemoveRequest& _internal_remove_quest() const;
  ::file_system::RemoveRequest* _internal_mutable_remove_quest();

  public:
  // .file_system.ReNameRequest rename_quest = 4;
  bool has_rename_quest() const;
  private:
  bool _internal_has_rename_quest() const;

  public:
  void clear_rename_quest() ;
  const ::file_system::ReNameRequest& rename_quest() const;
  PROTOBUF_NODISCARD ::file_system::ReNameRequest* release_rename_quest();
  ::file_system::ReNameRequest* mutable_rename_quest();
  void set_allocated_rename_quest(::file_system::ReNameRequest* value);
  void unsafe_arena_set_allocated_rename_quest(::file_system::ReNameRequest* value);
  ::file_system::ReNameRequest* unsafe_arena_release_rename_quest();

  private:
  const ::file_system::ReNameRequest& _internal_rename_quest() const;
  ::file_system::ReNameRequest* _internal_mutable_rename_quest();

  public:
  // .file_system.CopyRequest copy_quest = 5;
  bool has_copy_quest() const;
  private:
  bool _internal_has_copy_quest() const;

  public:
  void clear_copy_quest() ;
  const ::file_system::CopyRequest& copy_quest() const;
  PROTOBUF_NODISCARD ::file_system::CopyRequest* release_copy_quest();
  ::file_system::CopyRequest* mutable_copy_quest();
  void set_allocated_copy_quest(::file_system::CopyRequest* value);
  void unsafe_arena_set_allocated_copy_quest(::file_system::CopyRequest* value);
  ::file_system::CopyRequest* unsafe_arena_release_copy_quest();

  private:
  const ::file_system::CopyRequest& _internal_copy_quest() const;
  ::file_system::CopyRequest* _internal_mutable_copy_quest();

  public:
  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:file_system.FileOperationRequest)
 private:
  class _Internal;
  void set_has_create_quest();
  void set_has_remove_quest();
  void set_has_rename_quest();
  void set_has_copy_quest();
  inline bool has_request() const;
  inline void clear_has_request();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 5, 4,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FileOperationRequest& from_msg);
    int type_;
    union RequestUnion {
      constexpr RequestUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::file_system::CreateRequest* create_quest_;
      ::file_system::RemoveRequest* remove_quest_;
      ::file_system::ReNameRequest* rename_quest_;
      ::file_system::CopyRequest* copy_quest_;
    } request_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_define_2eproto;
};
// -------------------------------------------------------------------

class FileMetadata final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:file_system.FileMetadata) */ {
 public:
  inline FileMetadata() : FileMetadata(nullptr) {}
  ~FileMetadata() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FileMetadata* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FileMetadata));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileMetadata(
      ::google::protobuf::internal::ConstantInitialized);

  inline FileMetadata(const FileMetadata& from) : FileMetadata(nullptr, from) {}
  inline FileMetadata(FileMetadata&& from) noexcept
      : FileMetadata(nullptr, std::move(from)) {}
  inline FileMetadata& operator=(const FileMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileMetadata& operator=(FileMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileMetadata* internal_default_instance() {
    return reinterpret_cast<const FileMetadata*>(
        &_FileMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(FileMetadata& a, FileMetadata& b) { a.Swap(&b); }
  inline void Swap(FileMetadata* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileMetadata* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FileMetadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileMetadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FileMetadata& from) { FileMetadata::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FileMetadata* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "file_system.FileMetadata"; }

 protected:
  explicit FileMetadata(::google::protobuf::Arena* arena);
  FileMetadata(::google::protobuf::Arena* arena, const FileMetadata& from);
  FileMetadata(::google::protobuf::Arena* arena, FileMetadata&& from) noexcept
      : FileMetadata(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExtensionsFieldNumber = 5,
    kFileIdFieldNumber = 1,
    kFileNameFieldNumber = 2,
    kParentPathFieldNumber = 4,
    kFileSizeFieldNumber = 3,
  };
  // map<string, string> extensions = 5;
  int extensions_size() const;
  private:
  int _internal_extensions_size() const;

  public:
  void clear_extensions() ;
  const ::google::protobuf::Map<std::string, std::string>& extensions() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_extensions();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_extensions() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_extensions();

  public:
  // string file_id = 1;
  void clear_file_id() ;
  const std::string& file_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_id(Arg_&& arg, Args_... args);
  std::string* mutable_file_id();
  PROTOBUF_NODISCARD std::string* release_file_id();
  void set_allocated_file_id(std::string* value);

  private:
  const std::string& _internal_file_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_id(
      const std::string& value);
  std::string* _internal_mutable_file_id();

  public:
  // string file_name = 2;
  void clear_file_name() ;
  const std::string& file_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_name(Arg_&& arg, Args_... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* value);

  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(
      const std::string& value);
  std::string* _internal_mutable_file_name();

  public:
  // string parent_path = 4;
  void clear_parent_path() ;
  const std::string& parent_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_parent_path(Arg_&& arg, Args_... args);
  std::string* mutable_parent_path();
  PROTOBUF_NODISCARD std::string* release_parent_path();
  void set_allocated_parent_path(std::string* value);

  private:
  const std::string& _internal_parent_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_path(
      const std::string& value);
  std::string* _internal_mutable_parent_path();

  public:
  // int64 file_size = 3;
  void clear_file_size() ;
  ::int64_t file_size() const;
  void set_file_size(::int64_t value);

  private:
  ::int64_t _internal_file_size() const;
  void _internal_set_file_size(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:file_system.FileMetadata)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 5, 1,
      70, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FileMetadata& from_msg);
    ::google::protobuf::internal::MapField<FileMetadata_ExtensionsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        extensions_;
    ::google::protobuf::internal::ArenaStringPtr file_id_;
    ::google::protobuf::internal::ArenaStringPtr file_name_;
    ::google::protobuf::internal::ArenaStringPtr parent_path_;
    ::int64_t file_size_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_define_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LoginRequest

// string username = 1;
inline void LoginRequest::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& LoginRequest::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.LoginRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.LoginRequest.username)
}
inline std::string* LoginRequest::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:file_system.LoginRequest.username)
  return _s;
}
inline const std::string& LoginRequest::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void LoginRequest::_internal_set_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* LoginRequest::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* LoginRequest::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.LoginRequest.username)
  return _impl_.username_.Release();
}
inline void LoginRequest::set_allocated_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.LoginRequest.username)
}

// string password = 2;
inline void LoginRequest::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& LoginRequest::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.LoginRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.LoginRequest.password)
}
inline std::string* LoginRequest::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:file_system.LoginRequest.password)
  return _s;
}
inline const std::string& LoginRequest::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void LoginRequest::_internal_set_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* LoginRequest::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* LoginRequest::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.LoginRequest.password)
  return _impl_.password_.Release();
}
inline void LoginRequest::set_allocated_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.LoginRequest.password)
}

// -------------------------------------------------------------------

// LoginResponse

// string token = 1;
inline void LoginResponse::clear_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.ClearToEmpty();
}
inline const std::string& LoginResponse::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.LoginResponse.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginResponse::set_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.LoginResponse.token)
}
inline std::string* LoginResponse::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:file_system.LoginResponse.token)
  return _s;
}
inline const std::string& LoginResponse::_internal_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_.Get();
}
inline void LoginResponse::_internal_set_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.Set(value, GetArena());
}
inline std::string* LoginResponse::_internal_mutable_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* LoginResponse::release_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.LoginResponse.token)
  return _impl_.token_.Release();
}
inline void LoginResponse::set_allocated_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.LoginResponse.token)
}

// int64 expires_in = 2;
inline void LoginResponse::clear_expires_in() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expires_in_ = ::int64_t{0};
}
inline ::int64_t LoginResponse::expires_in() const {
  // @@protoc_insertion_point(field_get:file_system.LoginResponse.expires_in)
  return _internal_expires_in();
}
inline void LoginResponse::set_expires_in(::int64_t value) {
  _internal_set_expires_in(value);
  // @@protoc_insertion_point(field_set:file_system.LoginResponse.expires_in)
}
inline ::int64_t LoginResponse::_internal_expires_in() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expires_in_;
}
inline void LoginResponse::_internal_set_expires_in(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expires_in_ = value;
}

// -------------------------------------------------------------------

// PermissionRequest

// string resource_path = 1;
inline void PermissionRequest::clear_resource_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resource_path_.ClearToEmpty();
}
inline const std::string& PermissionRequest::resource_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.PermissionRequest.resource_path)
  return _internal_resource_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PermissionRequest::set_resource_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resource_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.PermissionRequest.resource_path)
}
inline std::string* PermissionRequest::mutable_resource_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_resource_path();
  // @@protoc_insertion_point(field_mutable:file_system.PermissionRequest.resource_path)
  return _s;
}
inline const std::string& PermissionRequest::_internal_resource_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.resource_path_.Get();
}
inline void PermissionRequest::_internal_set_resource_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resource_path_.Set(value, GetArena());
}
inline std::string* PermissionRequest::_internal_mutable_resource_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.resource_path_.Mutable( GetArena());
}
inline std::string* PermissionRequest::release_resource_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.PermissionRequest.resource_path)
  return _impl_.resource_path_.Release();
}
inline void PermissionRequest::set_allocated_resource_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resource_path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.resource_path_.IsDefault()) {
    _impl_.resource_path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.PermissionRequest.resource_path)
}

// string action = 2;
inline void PermissionRequest::clear_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.ClearToEmpty();
}
inline const std::string& PermissionRequest::action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.PermissionRequest.action)
  return _internal_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PermissionRequest::set_action(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.PermissionRequest.action)
}
inline std::string* PermissionRequest::mutable_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:file_system.PermissionRequest.action)
  return _s;
}
inline const std::string& PermissionRequest::_internal_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_.Get();
}
inline void PermissionRequest::_internal_set_action(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(value, GetArena());
}
inline std::string* PermissionRequest::_internal_mutable_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_.Mutable( GetArena());
}
inline std::string* PermissionRequest::release_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.PermissionRequest.action)
  return _impl_.action_.Release();
}
inline void PermissionRequest::set_allocated_action(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.PermissionRequest.action)
}

// -------------------------------------------------------------------

// PermissionResponse

// bool allowed = 1;
inline void PermissionResponse::clear_allowed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allowed_ = false;
}
inline bool PermissionResponse::allowed() const {
  // @@protoc_insertion_point(field_get:file_system.PermissionResponse.allowed)
  return _internal_allowed();
}
inline void PermissionResponse::set_allowed(bool value) {
  _internal_set_allowed(value);
  // @@protoc_insertion_point(field_set:file_system.PermissionResponse.allowed)
}
inline bool PermissionResponse::_internal_allowed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allowed_;
}
inline void PermissionResponse::_internal_set_allowed(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allowed_ = value;
}

// string reason = 2;
inline void PermissionResponse::clear_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& PermissionResponse::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.PermissionResponse.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PermissionResponse::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.PermissionResponse.reason)
}
inline std::string* PermissionResponse::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:file_system.PermissionResponse.reason)
  return _s;
}
inline const std::string& PermissionResponse::_internal_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reason_.Get();
}
inline void PermissionResponse::_internal_set_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* PermissionResponse::_internal_mutable_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* PermissionResponse::release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.PermissionResponse.reason)
  return _impl_.reason_.Release();
}
inline void PermissionResponse::set_allocated_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.PermissionResponse.reason)
}

// -------------------------------------------------------------------

// FileOperationRequest

// .file_system.FileOperationType type = 1;
inline void FileOperationRequest::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::file_system::FileOperationType FileOperationRequest::type() const {
  // @@protoc_insertion_point(field_get:file_system.FileOperationRequest.type)
  return _internal_type();
}
inline void FileOperationRequest::set_type(::file_system::FileOperationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:file_system.FileOperationRequest.type)
}
inline ::file_system::FileOperationType FileOperationRequest::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::file_system::FileOperationType>(_impl_.type_);
}
inline void FileOperationRequest::_internal_set_type(::file_system::FileOperationType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .file_system.CreateRequest create_quest = 2;
inline bool FileOperationRequest::has_create_quest() const {
  return request_case() == kCreateQuest;
}
inline bool FileOperationRequest::_internal_has_create_quest() const {
  return request_case() == kCreateQuest;
}
inline void FileOperationRequest::set_has_create_quest() {
  _impl_._oneof_case_[0] = kCreateQuest;
}
inline void FileOperationRequest::clear_create_quest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_case() == kCreateQuest) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.create_quest_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_.create_quest_);
    }
    clear_has_request();
  }
}
inline ::file_system::CreateRequest* FileOperationRequest::release_create_quest() {
  // @@protoc_insertion_point(field_release:file_system.FileOperationRequest.create_quest)
  if (request_case() == kCreateQuest) {
    clear_has_request();
    auto* temp = _impl_.request_.create_quest_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.create_quest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::file_system::CreateRequest& FileOperationRequest::_internal_create_quest() const {
  return request_case() == kCreateQuest ? *_impl_.request_.create_quest_ : reinterpret_cast<::file_system::CreateRequest&>(::file_system::_CreateRequest_default_instance_);
}
inline const ::file_system::CreateRequest& FileOperationRequest::create_quest() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.FileOperationRequest.create_quest)
  return _internal_create_quest();
}
inline ::file_system::CreateRequest* FileOperationRequest::unsafe_arena_release_create_quest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:file_system.FileOperationRequest.create_quest)
  if (request_case() == kCreateQuest) {
    clear_has_request();
    auto* temp = _impl_.request_.create_quest_;
    _impl_.request_.create_quest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileOperationRequest::unsafe_arena_set_allocated_create_quest(::file_system::CreateRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_create_quest();
    _impl_.request_.create_quest_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:file_system.FileOperationRequest.create_quest)
}
inline ::file_system::CreateRequest* FileOperationRequest::_internal_mutable_create_quest() {
  if (request_case() != kCreateQuest) {
    clear_request();
    set_has_create_quest();
    _impl_.request_.create_quest_ =
        ::google::protobuf::Message::DefaultConstruct<::file_system::CreateRequest>(GetArena());
  }
  return _impl_.request_.create_quest_;
}
inline ::file_system::CreateRequest* FileOperationRequest::mutable_create_quest() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::file_system::CreateRequest* _msg = _internal_mutable_create_quest();
  // @@protoc_insertion_point(field_mutable:file_system.FileOperationRequest.create_quest)
  return _msg;
}

// .file_system.RemoveRequest remove_quest = 3;
inline bool FileOperationRequest::has_remove_quest() const {
  return request_case() == kRemoveQuest;
}
inline bool FileOperationRequest::_internal_has_remove_quest() const {
  return request_case() == kRemoveQuest;
}
inline void FileOperationRequest::set_has_remove_quest() {
  _impl_._oneof_case_[0] = kRemoveQuest;
}
inline void FileOperationRequest::clear_remove_quest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_case() == kRemoveQuest) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.remove_quest_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_.remove_quest_);
    }
    clear_has_request();
  }
}
inline ::file_system::RemoveRequest* FileOperationRequest::release_remove_quest() {
  // @@protoc_insertion_point(field_release:file_system.FileOperationRequest.remove_quest)
  if (request_case() == kRemoveQuest) {
    clear_has_request();
    auto* temp = _impl_.request_.remove_quest_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.remove_quest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::file_system::RemoveRequest& FileOperationRequest::_internal_remove_quest() const {
  return request_case() == kRemoveQuest ? *_impl_.request_.remove_quest_ : reinterpret_cast<::file_system::RemoveRequest&>(::file_system::_RemoveRequest_default_instance_);
}
inline const ::file_system::RemoveRequest& FileOperationRequest::remove_quest() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.FileOperationRequest.remove_quest)
  return _internal_remove_quest();
}
inline ::file_system::RemoveRequest* FileOperationRequest::unsafe_arena_release_remove_quest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:file_system.FileOperationRequest.remove_quest)
  if (request_case() == kRemoveQuest) {
    clear_has_request();
    auto* temp = _impl_.request_.remove_quest_;
    _impl_.request_.remove_quest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileOperationRequest::unsafe_arena_set_allocated_remove_quest(::file_system::RemoveRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_remove_quest();
    _impl_.request_.remove_quest_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:file_system.FileOperationRequest.remove_quest)
}
inline ::file_system::RemoveRequest* FileOperationRequest::_internal_mutable_remove_quest() {
  if (request_case() != kRemoveQuest) {
    clear_request();
    set_has_remove_quest();
    _impl_.request_.remove_quest_ =
        ::google::protobuf::Message::DefaultConstruct<::file_system::RemoveRequest>(GetArena());
  }
  return _impl_.request_.remove_quest_;
}
inline ::file_system::RemoveRequest* FileOperationRequest::mutable_remove_quest() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::file_system::RemoveRequest* _msg = _internal_mutable_remove_quest();
  // @@protoc_insertion_point(field_mutable:file_system.FileOperationRequest.remove_quest)
  return _msg;
}

// .file_system.ReNameRequest rename_quest = 4;
inline bool FileOperationRequest::has_rename_quest() const {
  return request_case() == kRenameQuest;
}
inline bool FileOperationRequest::_internal_has_rename_quest() const {
  return request_case() == kRenameQuest;
}
inline void FileOperationRequest::set_has_rename_quest() {
  _impl_._oneof_case_[0] = kRenameQuest;
}
inline void FileOperationRequest::clear_rename_quest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_case() == kRenameQuest) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.rename_quest_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_.rename_quest_);
    }
    clear_has_request();
  }
}
inline ::file_system::ReNameRequest* FileOperationRequest::release_rename_quest() {
  // @@protoc_insertion_point(field_release:file_system.FileOperationRequest.rename_quest)
  if (request_case() == kRenameQuest) {
    clear_has_request();
    auto* temp = _impl_.request_.rename_quest_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.rename_quest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::file_system::ReNameRequest& FileOperationRequest::_internal_rename_quest() const {
  return request_case() == kRenameQuest ? *_impl_.request_.rename_quest_ : reinterpret_cast<::file_system::ReNameRequest&>(::file_system::_ReNameRequest_default_instance_);
}
inline const ::file_system::ReNameRequest& FileOperationRequest::rename_quest() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.FileOperationRequest.rename_quest)
  return _internal_rename_quest();
}
inline ::file_system::ReNameRequest* FileOperationRequest::unsafe_arena_release_rename_quest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:file_system.FileOperationRequest.rename_quest)
  if (request_case() == kRenameQuest) {
    clear_has_request();
    auto* temp = _impl_.request_.rename_quest_;
    _impl_.request_.rename_quest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileOperationRequest::unsafe_arena_set_allocated_rename_quest(::file_system::ReNameRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_rename_quest();
    _impl_.request_.rename_quest_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:file_system.FileOperationRequest.rename_quest)
}
inline ::file_system::ReNameRequest* FileOperationRequest::_internal_mutable_rename_quest() {
  if (request_case() != kRenameQuest) {
    clear_request();
    set_has_rename_quest();
    _impl_.request_.rename_quest_ =
        ::google::protobuf::Message::DefaultConstruct<::file_system::ReNameRequest>(GetArena());
  }
  return _impl_.request_.rename_quest_;
}
inline ::file_system::ReNameRequest* FileOperationRequest::mutable_rename_quest() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::file_system::ReNameRequest* _msg = _internal_mutable_rename_quest();
  // @@protoc_insertion_point(field_mutable:file_system.FileOperationRequest.rename_quest)
  return _msg;
}

// .file_system.CopyRequest copy_quest = 5;
inline bool FileOperationRequest::has_copy_quest() const {
  return request_case() == kCopyQuest;
}
inline bool FileOperationRequest::_internal_has_copy_quest() const {
  return request_case() == kCopyQuest;
}
inline void FileOperationRequest::set_has_copy_quest() {
  _impl_._oneof_case_[0] = kCopyQuest;
}
inline void FileOperationRequest::clear_copy_quest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_case() == kCopyQuest) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.copy_quest_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_.copy_quest_);
    }
    clear_has_request();
  }
}
inline ::file_system::CopyRequest* FileOperationRequest::release_copy_quest() {
  // @@protoc_insertion_point(field_release:file_system.FileOperationRequest.copy_quest)
  if (request_case() == kCopyQuest) {
    clear_has_request();
    auto* temp = _impl_.request_.copy_quest_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.copy_quest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::file_system::CopyRequest& FileOperationRequest::_internal_copy_quest() const {
  return request_case() == kCopyQuest ? *_impl_.request_.copy_quest_ : reinterpret_cast<::file_system::CopyRequest&>(::file_system::_CopyRequest_default_instance_);
}
inline const ::file_system::CopyRequest& FileOperationRequest::copy_quest() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.FileOperationRequest.copy_quest)
  return _internal_copy_quest();
}
inline ::file_system::CopyRequest* FileOperationRequest::unsafe_arena_release_copy_quest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:file_system.FileOperationRequest.copy_quest)
  if (request_case() == kCopyQuest) {
    clear_has_request();
    auto* temp = _impl_.request_.copy_quest_;
    _impl_.request_.copy_quest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileOperationRequest::unsafe_arena_set_allocated_copy_quest(::file_system::CopyRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_copy_quest();
    _impl_.request_.copy_quest_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:file_system.FileOperationRequest.copy_quest)
}
inline ::file_system::CopyRequest* FileOperationRequest::_internal_mutable_copy_quest() {
  if (request_case() != kCopyQuest) {
    clear_request();
    set_has_copy_quest();
    _impl_.request_.copy_quest_ =
        ::google::protobuf::Message::DefaultConstruct<::file_system::CopyRequest>(GetArena());
  }
  return _impl_.request_.copy_quest_;
}
inline ::file_system::CopyRequest* FileOperationRequest::mutable_copy_quest() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::file_system::CopyRequest* _msg = _internal_mutable_copy_quest();
  // @@protoc_insertion_point(field_mutable:file_system.FileOperationRequest.copy_quest)
  return _msg;
}

inline bool FileOperationRequest::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void FileOperationRequest::clear_has_request() {
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}
inline FileOperationRequest::RequestCase FileOperationRequest::request_case() const {
  return FileOperationRequest::RequestCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CreateRequest

// string root_path = 1;
inline void CreateRequest::clear_root_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.root_path_.ClearToEmpty();
}
inline const std::string& CreateRequest::root_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.CreateRequest.root_path)
  return _internal_root_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateRequest::set_root_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.root_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.CreateRequest.root_path)
}
inline std::string* CreateRequest::mutable_root_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_root_path();
  // @@protoc_insertion_point(field_mutable:file_system.CreateRequest.root_path)
  return _s;
}
inline const std::string& CreateRequest::_internal_root_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.root_path_.Get();
}
inline void CreateRequest::_internal_set_root_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.root_path_.Set(value, GetArena());
}
inline std::string* CreateRequest::_internal_mutable_root_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.root_path_.Mutable( GetArena());
}
inline std::string* CreateRequest::release_root_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.CreateRequest.root_path)
  return _impl_.root_path_.Release();
}
inline void CreateRequest::set_allocated_root_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.root_path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.root_path_.IsDefault()) {
    _impl_.root_path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.CreateRequest.root_path)
}

// string name = 2;
inline void CreateRequest::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.CreateRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.CreateRequest.name)
}
inline std::string* CreateRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:file_system.CreateRequest.name)
  return _s;
}
inline const std::string& CreateRequest::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void CreateRequest::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* CreateRequest::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* CreateRequest::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.CreateRequest.name)
  return _impl_.name_.Release();
}
inline void CreateRequest::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.CreateRequest.name)
}

// -------------------------------------------------------------------

// RemoveRequest

// string root_path = 1;
inline void RemoveRequest::clear_root_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.root_path_.ClearToEmpty();
}
inline const std::string& RemoveRequest::root_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.RemoveRequest.root_path)
  return _internal_root_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoveRequest::set_root_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.root_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.RemoveRequest.root_path)
}
inline std::string* RemoveRequest::mutable_root_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_root_path();
  // @@protoc_insertion_point(field_mutable:file_system.RemoveRequest.root_path)
  return _s;
}
inline const std::string& RemoveRequest::_internal_root_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.root_path_.Get();
}
inline void RemoveRequest::_internal_set_root_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.root_path_.Set(value, GetArena());
}
inline std::string* RemoveRequest::_internal_mutable_root_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.root_path_.Mutable( GetArena());
}
inline std::string* RemoveRequest::release_root_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.RemoveRequest.root_path)
  return _impl_.root_path_.Release();
}
inline void RemoveRequest::set_allocated_root_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.root_path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.root_path_.IsDefault()) {
    _impl_.root_path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.RemoveRequest.root_path)
}

// string name = 2;
inline void RemoveRequest::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RemoveRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.RemoveRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoveRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.RemoveRequest.name)
}
inline std::string* RemoveRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:file_system.RemoveRequest.name)
  return _s;
}
inline const std::string& RemoveRequest::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void RemoveRequest::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* RemoveRequest::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* RemoveRequest::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.RemoveRequest.name)
  return _impl_.name_.Release();
}
inline void RemoveRequest::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.RemoveRequest.name)
}

// -------------------------------------------------------------------

// MergeChunkRequest

// string file_id = 1;
inline void MergeChunkRequest::clear_file_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_id_.ClearToEmpty();
}
inline const std::string& MergeChunkRequest::file_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.MergeChunkRequest.file_id)
  return _internal_file_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MergeChunkRequest::set_file_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.MergeChunkRequest.file_id)
}
inline std::string* MergeChunkRequest::mutable_file_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_id();
  // @@protoc_insertion_point(field_mutable:file_system.MergeChunkRequest.file_id)
  return _s;
}
inline const std::string& MergeChunkRequest::_internal_file_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_id_.Get();
}
inline void MergeChunkRequest::_internal_set_file_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_id_.Set(value, GetArena());
}
inline std::string* MergeChunkRequest::_internal_mutable_file_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.file_id_.Mutable( GetArena());
}
inline std::string* MergeChunkRequest::release_file_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.MergeChunkRequest.file_id)
  return _impl_.file_id_.Release();
}
inline void MergeChunkRequest::set_allocated_file_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.file_id_.IsDefault()) {
    _impl_.file_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.MergeChunkRequest.file_id)
}

// -------------------------------------------------------------------

// ReNameRequest

// string root_path = 1;
inline void ReNameRequest::clear_root_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.root_path_.ClearToEmpty();
}
inline const std::string& ReNameRequest::root_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.ReNameRequest.root_path)
  return _internal_root_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReNameRequest::set_root_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.root_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.ReNameRequest.root_path)
}
inline std::string* ReNameRequest::mutable_root_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_root_path();
  // @@protoc_insertion_point(field_mutable:file_system.ReNameRequest.root_path)
  return _s;
}
inline const std::string& ReNameRequest::_internal_root_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.root_path_.Get();
}
inline void ReNameRequest::_internal_set_root_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.root_path_.Set(value, GetArena());
}
inline std::string* ReNameRequest::_internal_mutable_root_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.root_path_.Mutable( GetArena());
}
inline std::string* ReNameRequest::release_root_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.ReNameRequest.root_path)
  return _impl_.root_path_.Release();
}
inline void ReNameRequest::set_allocated_root_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.root_path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.root_path_.IsDefault()) {
    _impl_.root_path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.ReNameRequest.root_path)
}

// string old_name = 2;
inline void ReNameRequest::clear_old_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_name_.ClearToEmpty();
}
inline const std::string& ReNameRequest::old_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.ReNameRequest.old_name)
  return _internal_old_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReNameRequest::set_old_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.ReNameRequest.old_name)
}
inline std::string* ReNameRequest::mutable_old_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_old_name();
  // @@protoc_insertion_point(field_mutable:file_system.ReNameRequest.old_name)
  return _s;
}
inline const std::string& ReNameRequest::_internal_old_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.old_name_.Get();
}
inline void ReNameRequest::_internal_set_old_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_name_.Set(value, GetArena());
}
inline std::string* ReNameRequest::_internal_mutable_old_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.old_name_.Mutable( GetArena());
}
inline std::string* ReNameRequest::release_old_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.ReNameRequest.old_name)
  return _impl_.old_name_.Release();
}
inline void ReNameRequest::set_allocated_old_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.old_name_.IsDefault()) {
    _impl_.old_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.ReNameRequest.old_name)
}

// string new_name = 3;
inline void ReNameRequest::clear_new_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_name_.ClearToEmpty();
}
inline const std::string& ReNameRequest::new_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.ReNameRequest.new_name)
  return _internal_new_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReNameRequest::set_new_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.ReNameRequest.new_name)
}
inline std::string* ReNameRequest::mutable_new_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_new_name();
  // @@protoc_insertion_point(field_mutable:file_system.ReNameRequest.new_name)
  return _s;
}
inline const std::string& ReNameRequest::_internal_new_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_name_.Get();
}
inline void ReNameRequest::_internal_set_new_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_name_.Set(value, GetArena());
}
inline std::string* ReNameRequest::_internal_mutable_new_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.new_name_.Mutable( GetArena());
}
inline std::string* ReNameRequest::release_new_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.ReNameRequest.new_name)
  return _impl_.new_name_.Release();
}
inline void ReNameRequest::set_allocated_new_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.new_name_.IsDefault()) {
    _impl_.new_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.ReNameRequest.new_name)
}

// -------------------------------------------------------------------

// CopyRequest

// string old_root_path = 1;
inline void CopyRequest::clear_old_root_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_root_path_.ClearToEmpty();
}
inline const std::string& CopyRequest::old_root_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.CopyRequest.old_root_path)
  return _internal_old_root_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CopyRequest::set_old_root_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_root_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.CopyRequest.old_root_path)
}
inline std::string* CopyRequest::mutable_old_root_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_old_root_path();
  // @@protoc_insertion_point(field_mutable:file_system.CopyRequest.old_root_path)
  return _s;
}
inline const std::string& CopyRequest::_internal_old_root_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.old_root_path_.Get();
}
inline void CopyRequest::_internal_set_old_root_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_root_path_.Set(value, GetArena());
}
inline std::string* CopyRequest::_internal_mutable_old_root_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.old_root_path_.Mutable( GetArena());
}
inline std::string* CopyRequest::release_old_root_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.CopyRequest.old_root_path)
  return _impl_.old_root_path_.Release();
}
inline void CopyRequest::set_allocated_old_root_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_root_path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.old_root_path_.IsDefault()) {
    _impl_.old_root_path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.CopyRequest.old_root_path)
}

// string old_name = 2;
inline void CopyRequest::clear_old_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_name_.ClearToEmpty();
}
inline const std::string& CopyRequest::old_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.CopyRequest.old_name)
  return _internal_old_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CopyRequest::set_old_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.CopyRequest.old_name)
}
inline std::string* CopyRequest::mutable_old_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_old_name();
  // @@protoc_insertion_point(field_mutable:file_system.CopyRequest.old_name)
  return _s;
}
inline const std::string& CopyRequest::_internal_old_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.old_name_.Get();
}
inline void CopyRequest::_internal_set_old_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_name_.Set(value, GetArena());
}
inline std::string* CopyRequest::_internal_mutable_old_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.old_name_.Mutable( GetArena());
}
inline std::string* CopyRequest::release_old_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.CopyRequest.old_name)
  return _impl_.old_name_.Release();
}
inline void CopyRequest::set_allocated_old_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.old_name_.IsDefault()) {
    _impl_.old_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.CopyRequest.old_name)
}

// string new_root_path = 3;
inline void CopyRequest::clear_new_root_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_root_path_.ClearToEmpty();
}
inline const std::string& CopyRequest::new_root_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.CopyRequest.new_root_path)
  return _internal_new_root_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CopyRequest::set_new_root_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_root_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.CopyRequest.new_root_path)
}
inline std::string* CopyRequest::mutable_new_root_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_new_root_path();
  // @@protoc_insertion_point(field_mutable:file_system.CopyRequest.new_root_path)
  return _s;
}
inline const std::string& CopyRequest::_internal_new_root_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_root_path_.Get();
}
inline void CopyRequest::_internal_set_new_root_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_root_path_.Set(value, GetArena());
}
inline std::string* CopyRequest::_internal_mutable_new_root_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.new_root_path_.Mutable( GetArena());
}
inline std::string* CopyRequest::release_new_root_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.CopyRequest.new_root_path)
  return _impl_.new_root_path_.Release();
}
inline void CopyRequest::set_allocated_new_root_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_root_path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.new_root_path_.IsDefault()) {
    _impl_.new_root_path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.CopyRequest.new_root_path)
}

// string new_name = 4;
inline void CopyRequest::clear_new_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_name_.ClearToEmpty();
}
inline const std::string& CopyRequest::new_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.CopyRequest.new_name)
  return _internal_new_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CopyRequest::set_new_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.CopyRequest.new_name)
}
inline std::string* CopyRequest::mutable_new_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_new_name();
  // @@protoc_insertion_point(field_mutable:file_system.CopyRequest.new_name)
  return _s;
}
inline const std::string& CopyRequest::_internal_new_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_name_.Get();
}
inline void CopyRequest::_internal_set_new_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_name_.Set(value, GetArena());
}
inline std::string* CopyRequest::_internal_mutable_new_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.new_name_.Mutable( GetArena());
}
inline std::string* CopyRequest::release_new_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.CopyRequest.new_name)
  return _impl_.new_name_.Release();
}
inline void CopyRequest::set_allocated_new_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.new_name_.IsDefault()) {
    _impl_.new_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.CopyRequest.new_name)
}

// -------------------------------------------------------------------

// UploadFileResponse

// .file_system.OperationResponse status = 1;
inline bool UploadFileResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline void UploadFileResponse::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::file_system::OperationResponse& UploadFileResponse::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::file_system::OperationResponse* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::file_system::OperationResponse&>(::file_system::_OperationResponse_default_instance_);
}
inline const ::file_system::OperationResponse& UploadFileResponse::status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.UploadFileResponse.status)
  return _internal_status();
}
inline void UploadFileResponse::unsafe_arena_set_allocated_status(::file_system::OperationResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = reinterpret_cast<::file_system::OperationResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:file_system.UploadFileResponse.status)
}
inline ::file_system::OperationResponse* UploadFileResponse::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::file_system::OperationResponse* released = _impl_.status_;
  _impl_.status_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::file_system::OperationResponse* UploadFileResponse::unsafe_arena_release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.UploadFileResponse.status)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::file_system::OperationResponse* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::file_system::OperationResponse* UploadFileResponse::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::file_system::OperationResponse>(GetArena());
    _impl_.status_ = reinterpret_cast<::file_system::OperationResponse*>(p);
  }
  return _impl_.status_;
}
inline ::file_system::OperationResponse* UploadFileResponse::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::file_system::OperationResponse* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:file_system.UploadFileResponse.status)
  return _msg;
}
inline void UploadFileResponse::set_allocated_status(::file_system::OperationResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.status_ = reinterpret_cast<::file_system::OperationResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:file_system.UploadFileResponse.status)
}

// string file_id = 2;
inline void UploadFileResponse::clear_file_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_id_.ClearToEmpty();
}
inline const std::string& UploadFileResponse::file_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.UploadFileResponse.file_id)
  return _internal_file_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadFileResponse::set_file_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.UploadFileResponse.file_id)
}
inline std::string* UploadFileResponse::mutable_file_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_id();
  // @@protoc_insertion_point(field_mutable:file_system.UploadFileResponse.file_id)
  return _s;
}
inline const std::string& UploadFileResponse::_internal_file_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_id_.Get();
}
inline void UploadFileResponse::_internal_set_file_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_id_.Set(value, GetArena());
}
inline std::string* UploadFileResponse::_internal_mutable_file_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.file_id_.Mutable( GetArena());
}
inline std::string* UploadFileResponse::release_file_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.UploadFileResponse.file_id)
  return _impl_.file_id_.Release();
}
inline void UploadFileResponse::set_allocated_file_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.file_id_.IsDefault()) {
    _impl_.file_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.UploadFileResponse.file_id)
}

// -------------------------------------------------------------------

// FindFileRequest

// string file_name = 1;
inline void FindFileRequest::clear_file_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& FindFileRequest::file_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.FindFileRequest.file_name)
  return _internal_file_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FindFileRequest::set_file_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.FindFileRequest.file_name)
}
inline std::string* FindFileRequest::mutable_file_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:file_system.FindFileRequest.file_name)
  return _s;
}
inline const std::string& FindFileRequest::_internal_file_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_name_.Get();
}
inline void FindFileRequest::_internal_set_file_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_name_.Set(value, GetArena());
}
inline std::string* FindFileRequest::_internal_mutable_file_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.file_name_.Mutable( GetArena());
}
inline std::string* FindFileRequest::release_file_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.FindFileRequest.file_name)
  return _impl_.file_name_.Release();
}
inline void FindFileRequest::set_allocated_file_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.FindFileRequest.file_name)
}

// optional string root_path = 2;
inline bool FindFileRequest::has_root_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FindFileRequest::clear_root_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.root_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FindFileRequest::root_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.FindFileRequest.root_path)
  return _internal_root_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FindFileRequest::set_root_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.root_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.FindFileRequest.root_path)
}
inline std::string* FindFileRequest::mutable_root_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_root_path();
  // @@protoc_insertion_point(field_mutable:file_system.FindFileRequest.root_path)
  return _s;
}
inline const std::string& FindFileRequest::_internal_root_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.root_path_.Get();
}
inline void FindFileRequest::_internal_set_root_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.root_path_.Set(value, GetArena());
}
inline std::string* FindFileRequest::_internal_mutable_root_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.root_path_.Mutable( GetArena());
}
inline std::string* FindFileRequest::release_root_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.FindFileRequest.root_path)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.root_path_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.root_path_.Set("", GetArena());
  }
  return released;
}
inline void FindFileRequest::set_allocated_root_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.root_path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.root_path_.IsDefault()) {
    _impl_.root_path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.FindFileRequest.root_path)
}

// -------------------------------------------------------------------

// FileChunk

// bytes content = 1;
inline void FileChunk::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& FileChunk::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.FileChunk.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileChunk::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.FileChunk.content)
}
inline std::string* FileChunk::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:file_system.FileChunk.content)
  return _s;
}
inline const std::string& FileChunk::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void FileChunk::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* FileChunk::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* FileChunk::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.FileChunk.content)
  return _impl_.content_.Release();
}
inline void FileChunk::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.FileChunk.content)
}

// string file_id = 2;
inline void FileChunk::clear_file_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_id_.ClearToEmpty();
}
inline const std::string& FileChunk::file_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.FileChunk.file_id)
  return _internal_file_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileChunk::set_file_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.FileChunk.file_id)
}
inline std::string* FileChunk::mutable_file_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_id();
  // @@protoc_insertion_point(field_mutable:file_system.FileChunk.file_id)
  return _s;
}
inline const std::string& FileChunk::_internal_file_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_id_.Get();
}
inline void FileChunk::_internal_set_file_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_id_.Set(value, GetArena());
}
inline std::string* FileChunk::_internal_mutable_file_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.file_id_.Mutable( GetArena());
}
inline std::string* FileChunk::release_file_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.FileChunk.file_id)
  return _impl_.file_id_.Release();
}
inline void FileChunk::set_allocated_file_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.file_id_.IsDefault()) {
    _impl_.file_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.FileChunk.file_id)
}

// int32 index = 3;
inline void FileChunk::clear_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = 0;
}
inline ::int32_t FileChunk::index() const {
  // @@protoc_insertion_point(field_get:file_system.FileChunk.index)
  return _internal_index();
}
inline void FileChunk::set_index(::int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:file_system.FileChunk.index)
}
inline ::int32_t FileChunk::_internal_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.index_;
}
inline void FileChunk::_internal_set_index(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UploadStatus

// .file_system.OperationResponse status = 1;
inline bool UploadStatus::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline void UploadStatus::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::file_system::OperationResponse& UploadStatus::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::file_system::OperationResponse* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::file_system::OperationResponse&>(::file_system::_OperationResponse_default_instance_);
}
inline const ::file_system::OperationResponse& UploadStatus::status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.UploadStatus.status)
  return _internal_status();
}
inline void UploadStatus::unsafe_arena_set_allocated_status(::file_system::OperationResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = reinterpret_cast<::file_system::OperationResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:file_system.UploadStatus.status)
}
inline ::file_system::OperationResponse* UploadStatus::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::file_system::OperationResponse* released = _impl_.status_;
  _impl_.status_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::file_system::OperationResponse* UploadStatus::unsafe_arena_release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.UploadStatus.status)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::file_system::OperationResponse* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::file_system::OperationResponse* UploadStatus::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::file_system::OperationResponse>(GetArena());
    _impl_.status_ = reinterpret_cast<::file_system::OperationResponse*>(p);
  }
  return _impl_.status_;
}
inline ::file_system::OperationResponse* UploadStatus::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::file_system::OperationResponse* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:file_system.UploadStatus.status)
  return _msg;
}
inline void UploadStatus::set_allocated_status(::file_system::OperationResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.status_ = reinterpret_cast<::file_system::OperationResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:file_system.UploadStatus.status)
}

// map<int32, bool> chunk_status = 2;
inline int UploadStatus::_internal_chunk_status_size() const {
  return _internal_chunk_status().size();
}
inline int UploadStatus::chunk_status_size() const {
  return _internal_chunk_status_size();
}
inline void UploadStatus::clear_chunk_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_status_.Clear();
}
inline const ::google::protobuf::Map<::int32_t, bool>& UploadStatus::_internal_chunk_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunk_status_.GetMap();
}
inline const ::google::protobuf::Map<::int32_t, bool>& UploadStatus::chunk_status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:file_system.UploadStatus.chunk_status)
  return _internal_chunk_status();
}
inline ::google::protobuf::Map<::int32_t, bool>* UploadStatus::_internal_mutable_chunk_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.chunk_status_.MutableMap();
}
inline ::google::protobuf::Map<::int32_t, bool>* UploadStatus::mutable_chunk_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:file_system.UploadStatus.chunk_status)
  return _internal_mutable_chunk_status();
}

// -------------------------------------------------------------------

// FileRequest

// string file_id = 1;
inline void FileRequest::clear_file_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_id_.ClearToEmpty();
}
inline const std::string& FileRequest::file_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.FileRequest.file_id)
  return _internal_file_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileRequest::set_file_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.FileRequest.file_id)
}
inline std::string* FileRequest::mutable_file_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_id();
  // @@protoc_insertion_point(field_mutable:file_system.FileRequest.file_id)
  return _s;
}
inline const std::string& FileRequest::_internal_file_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_id_.Get();
}
inline void FileRequest::_internal_set_file_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_id_.Set(value, GetArena());
}
inline std::string* FileRequest::_internal_mutable_file_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.file_id_.Mutable( GetArena());
}
inline std::string* FileRequest::release_file_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.FileRequest.file_id)
  return _impl_.file_id_.Release();
}
inline void FileRequest::set_allocated_file_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.file_id_.IsDefault()) {
    _impl_.file_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.FileRequest.file_id)
}

// optional int32 index = 2;
inline bool FileRequest::has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FileRequest::clear_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t FileRequest::index() const {
  // @@protoc_insertion_point(field_get:file_system.FileRequest.index)
  return _internal_index();
}
inline void FileRequest::set_index(::int32_t value) {
  _internal_set_index(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:file_system.FileRequest.index)
}
inline ::int32_t FileRequest::_internal_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.index_;
}
inline void FileRequest::_internal_set_index(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FileMetadata

// string file_id = 1;
inline void FileMetadata::clear_file_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_id_.ClearToEmpty();
}
inline const std::string& FileMetadata::file_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.FileMetadata.file_id)
  return _internal_file_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileMetadata::set_file_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.FileMetadata.file_id)
}
inline std::string* FileMetadata::mutable_file_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_id();
  // @@protoc_insertion_point(field_mutable:file_system.FileMetadata.file_id)
  return _s;
}
inline const std::string& FileMetadata::_internal_file_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_id_.Get();
}
inline void FileMetadata::_internal_set_file_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_id_.Set(value, GetArena());
}
inline std::string* FileMetadata::_internal_mutable_file_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.file_id_.Mutable( GetArena());
}
inline std::string* FileMetadata::release_file_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.FileMetadata.file_id)
  return _impl_.file_id_.Release();
}
inline void FileMetadata::set_allocated_file_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.file_id_.IsDefault()) {
    _impl_.file_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.FileMetadata.file_id)
}

// string file_name = 2;
inline void FileMetadata::clear_file_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& FileMetadata::file_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.FileMetadata.file_name)
  return _internal_file_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileMetadata::set_file_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.FileMetadata.file_name)
}
inline std::string* FileMetadata::mutable_file_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:file_system.FileMetadata.file_name)
  return _s;
}
inline const std::string& FileMetadata::_internal_file_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_name_.Get();
}
inline void FileMetadata::_internal_set_file_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_name_.Set(value, GetArena());
}
inline std::string* FileMetadata::_internal_mutable_file_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.file_name_.Mutable( GetArena());
}
inline std::string* FileMetadata::release_file_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.FileMetadata.file_name)
  return _impl_.file_name_.Release();
}
inline void FileMetadata::set_allocated_file_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.FileMetadata.file_name)
}

// int64 file_size = 3;
inline void FileMetadata::clear_file_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_size_ = ::int64_t{0};
}
inline ::int64_t FileMetadata::file_size() const {
  // @@protoc_insertion_point(field_get:file_system.FileMetadata.file_size)
  return _internal_file_size();
}
inline void FileMetadata::set_file_size(::int64_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:file_system.FileMetadata.file_size)
}
inline ::int64_t FileMetadata::_internal_file_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_size_;
}
inline void FileMetadata::_internal_set_file_size(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_size_ = value;
}

// string parent_path = 4;
inline void FileMetadata::clear_parent_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_path_.ClearToEmpty();
}
inline const std::string& FileMetadata::parent_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.FileMetadata.parent_path)
  return _internal_parent_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileMetadata::set_parent_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.FileMetadata.parent_path)
}
inline std::string* FileMetadata::mutable_parent_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_parent_path();
  // @@protoc_insertion_point(field_mutable:file_system.FileMetadata.parent_path)
  return _s;
}
inline const std::string& FileMetadata::_internal_parent_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.parent_path_.Get();
}
inline void FileMetadata::_internal_set_parent_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_path_.Set(value, GetArena());
}
inline std::string* FileMetadata::_internal_mutable_parent_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.parent_path_.Mutable( GetArena());
}
inline std::string* FileMetadata::release_parent_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.FileMetadata.parent_path)
  return _impl_.parent_path_.Release();
}
inline void FileMetadata::set_allocated_parent_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.parent_path_.IsDefault()) {
    _impl_.parent_path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.FileMetadata.parent_path)
}

// map<string, string> extensions = 5;
inline int FileMetadata::_internal_extensions_size() const {
  return _internal_extensions().size();
}
inline int FileMetadata::extensions_size() const {
  return _internal_extensions_size();
}
inline void FileMetadata::clear_extensions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extensions_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& FileMetadata::_internal_extensions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.extensions_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& FileMetadata::extensions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:file_system.FileMetadata.extensions)
  return _internal_extensions();
}
inline ::google::protobuf::Map<std::string, std::string>* FileMetadata::_internal_mutable_extensions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.extensions_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* FileMetadata::mutable_extensions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:file_system.FileMetadata.extensions)
  return _internal_mutable_extensions();
}

// -------------------------------------------------------------------

// OperationResponse

// bool success = 1;
inline void OperationResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool OperationResponse::success() const {
  // @@protoc_insertion_point(field_get:file_system.OperationResponse.success)
  return _internal_success();
}
inline void OperationResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:file_system.OperationResponse.success)
}
inline bool OperationResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void OperationResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// optional string extensions = 2;
inline bool OperationResponse::has_extensions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void OperationResponse::clear_extensions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extensions_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OperationResponse::extensions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.OperationResponse.extensions)
  return _internal_extensions();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationResponse::set_extensions(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.extensions_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.OperationResponse.extensions)
}
inline std::string* OperationResponse::mutable_extensions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_extensions();
  // @@protoc_insertion_point(field_mutable:file_system.OperationResponse.extensions)
  return _s;
}
inline const std::string& OperationResponse::_internal_extensions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.extensions_.Get();
}
inline void OperationResponse::_internal_set_extensions(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.extensions_.Set(value, GetArena());
}
inline std::string* OperationResponse::_internal_mutable_extensions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.extensions_.Mutable( GetArena());
}
inline std::string* OperationResponse::release_extensions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.OperationResponse.extensions)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.extensions_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.extensions_.Set("", GetArena());
  }
  return released;
}
inline void OperationResponse::set_allocated_extensions(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.extensions_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.extensions_.IsDefault()) {
    _impl_.extensions_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.OperationResponse.extensions)
}

// optional string error_detail = 3;
inline bool OperationResponse::has_error_detail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void OperationResponse::clear_error_detail() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_detail_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OperationResponse::error_detail() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_system.OperationResponse.error_detail)
  return _internal_error_detail();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationResponse::set_error_detail(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_detail_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_system.OperationResponse.error_detail)
}
inline std::string* OperationResponse::mutable_error_detail() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_detail();
  // @@protoc_insertion_point(field_mutable:file_system.OperationResponse.error_detail)
  return _s;
}
inline const std::string& OperationResponse::_internal_error_detail() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_detail_.Get();
}
inline void OperationResponse::_internal_set_error_detail(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_detail_.Set(value, GetArena());
}
inline std::string* OperationResponse::_internal_mutable_error_detail() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.error_detail_.Mutable( GetArena());
}
inline std::string* OperationResponse::release_error_detail() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_system.OperationResponse.error_detail)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.error_detail_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.error_detail_.Set("", GetArena());
  }
  return released;
}
inline void OperationResponse::set_allocated_error_detail(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.error_detail_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_detail_.IsDefault()) {
    _impl_.error_detail_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_system.OperationResponse.error_detail)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace file_system


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::file_system::FileOperationType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::file_system::FileOperationType>() {
  return ::file_system::FileOperationType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // define_2eproto_2epb_2eh
